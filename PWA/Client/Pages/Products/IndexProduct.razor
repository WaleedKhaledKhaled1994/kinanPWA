@page "/products"

@inject IProduct productRepository
<Header />
<br />
<br />
<br />
<div class="container">
    @if (products == null)
    {
        <h1>Loading</h1>
    }
    else
    {
        <TelerikListView Data=@products Pageable="true" PageSize="5">
            <HeaderTemplate>
                <a href="/product/create" style="margin-left:20px;"><TelerikButton Icon="add" Class="btn-primary">Add</TelerikButton></a>
                <h3 style="text-align:center; color:black">
                    Products
                </h3>
            </HeaderTemplate>
            <Template>
                <div class="k-card k-card-horizontal">
                    <div class="k-vbox k-column">
                        <div class="k-card-body">
                            @*<h3 class="k-card-title" style="color:black">@context.SubCategory.Name</h3>*@
                            <h4 class="k-card-title" style="color:black">@context.Name</h4>
                            <h5 class="k-card-subtitle" style="color:grey">@context.Description</h5>
                        </div>
                        <div class="k-card-actions k-card-actions-horizontal k-card-actions-start">
                            <a href="/product/Edit/@context.Id"><TelerikButton Icon="edit" Class="btn-dark">Edit</TelerikButton></a>
                            &nbsp;&nbsp;
                            <ConfirmButton OnClick="@(() => DeleteRow(@context.Id))" ConfirmText="Are you sure you want to delete this Product?" ButtonText="Delete" ConfirmTitle="Delete Product!" Icon="delete" ButtonType="btn-danger" />
                        </div>
                    </div>
                    <img class="k-card-image img-thumbnail" alt="SubCategory Image" src="@context.Image" />
                </div>
            </Template>
        </TelerikListView>
    }

</div>
<Footer />
@code{
    private List<Product> products;
    


    protected async override Task OnInitializedAsync()
    {
        products = await productRepository.GetProducts();
    }


    private async Task DeleteRow(long id)
    {
        await productRepository.DeleteProduct(id);
        products = await productRepository.GetProducts();
    }
}
